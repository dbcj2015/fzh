<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd        
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        <bean id="eval" class="com.bjsxt.service.EvalService"></bean>
        <bean id="exam" class="com.bjsxt.service.ExamService"></bean>
        <bean id="learn" class="com.bjsxt.service.LearningService"></bean>
        <!-- 注册通知类:切面 -->
        <bean id="timer" class="com.bjsxt.aspect.TimePlugin"></bean>
        <!-- 配置(切面)插件，让插件生效 -->
        <aop:config>
        	<aop:aspect ref="timer">
        	<!-- 
				List com.bjsxt.baizhan.service.EmpService.findAll(Integer page , Integer rows)
				*    com.bjsxt.baizhan..         *Service.      *(..)
				将切面用在baizhan包中所有类名以Service结尾的类的所有方法上
				* com.bjsxt.baizhan，之间有一个空格
				execution表达式中,其中 * 代表匹配所有, ..用来包中代表包含所有子包 , ..用在参数中代表不限个数不限类型的参数形式
				execution(String com.bjsxt.baizhan..EvalService.startEval(Integer)) 精确匹配
				execution(* com.bjsxt.baizhan..*.obtain*(..))匹配所有obtain开头的方法
				!execution(* com.bjsxt.baizhan..*.obtain*(..)) 排除所有obtain开头的方法
				execution(* com.bjsxt.baizhan..*.*(*,*))之匹配有两个参数的方法
				<aop:pointcut expression="execution(* com.bjsxt.baizhan..*Service.*(..)) and 
										!execution(* com.bjsxt.baizhan..*Service.get*(..)) and 
										!execution(* com.bjsxt.baizhan..*Service.set*(..)) " 
				id="pc"></aop:pointcut>
					
			 --> 
        		<aop:pointcut expression="execution(* com.bjsxt.service..*Service.*(..))" id="pc"/>
        		
        		<!-- 激活插件,在Service中除了get/set方法以外的方法执行时,自动调用TimerPlugin.doAround方法处理结果-->
        			<!-- get(),set()方法通常是不需要插件进行拦截，正常执行即可，其余类中的方法可以考虑插件拦截 
        				同时插件类中可能存在多个方法:
        					<aop:around method="doAround" pointcut-ref="pc"/>
        				该通知信息就是告诉插件执行插件类中的那个方法
        			-->
		        			<!-- aop:around我们称之为通知(advice) 
									必考题: AOP中有哪几类通知:
										有5种通知,代表不同的执行时机
											前置通知 before ※/2 ,  目标方法运行前执行
											后置通知 after ※/2 , 目标方法运行后运行
											返回后通知  after-returning ※/2 目标方法获取返回值后运行
											异常通知 after-throwing ※/2 抛出异常的时候运行
											环绕通知 around  ※※※※※  涵盖以上四种通知的功能
							-->
		<!--  
			<aop:around method="doAround" pointcut-ref="pc"/>
			-->
			<!-- <aop:before method="doBefore" pointcut-ref="pc"/>
			<aop:after method="doAfter" pointcut-ref="pc"/> -->
			<aop:around method="doAroundAdvice" pointcut-ref="pc"/>
        	</aop:aspect>
        </aop:config>
</beans>










